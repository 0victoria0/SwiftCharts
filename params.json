{"name":"Swiftcharts","tagline":"Easy to use and highly customizable charts library for iOS","body":"# SwiftCharts\r\n\r\n[![Version](https://img.shields.io/cocoapods/v/SwiftCharts.svg?style=flat)](http://cocoadocs.org/docsets/Charts)\r\n[![License](https://img.shields.io/cocoapods/l/SwiftCharts.svg?style=flat)](http://cocoadocs.org/docsets/Charts)\r\n\r\nEasy to use and highly customizable charts library for iOS\r\n\r\n##### Features:\r\n- Bars - plain, stacked, grouped, horizontal, vertical\r\n- Scatter\r\n- Line / Multiple lines\r\n- Areas\r\n- Bubble\r\n- Multiple axis\r\n- Custom units\r\n- Custom views\r\n- Multiple labels (x axis)\r\n- Candlestick\r\n- Cubic line\r\n- Complex interactivity support\r\n- Easy extensibility\r\n- **Easy to use**: no learning curve, no complicated settings - just assemble chart using well defined components.\r\n\r\nSwift 1.2, iOS 7/8. Swift 2.0 branch (latest test on XCode 7 beta 3).\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bD6uDF-KckM\" frameborder=\"0\" allowfullscreen></iframe>\r\n[Video](https://www.youtube.com/watch?v=bD6uDF-KckM) (this will be updated only on new tags - check the [changelog](CHANGELOG.md) for possible new examples in master)\r\n\r\n##### Screenshots:\r\n\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0102.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0022.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0023.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0024.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0025.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0026.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0101.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0027.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0028.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0029.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0031.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0033.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0034.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0037.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0038.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0039.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0040.jpeg)\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/IMG_0041.jpeg)\r\n\r\n\r\n##### Installation\r\n\r\nAdd to your podfile:\r\n```ruby\r\nuse_frameworks!\r\npod 'SwiftCharts', '~> 0.2'\r\n```\r\nOr to use the Swift 2.0 branch:\r\n```ruby\r\nuse_frameworks!\r\npod 'SwiftCharts', :git => 'https://github.com/i-schuetz/SwiftCharts.git', :branch => 'swift2.0'\r\n```\r\n\r\nAnd then:\r\n```ruby\r\npod install\r\n```\r\n\r\nImport the framework in your code:\r\n```swift\r\nimport SwiftCharts\r\n```\r\n\r\n####Concept:\r\n\r\n- Layer architecture, which makes it extremely easy to customize charts, create new types, combine existing ones and add interactive elements.\r\n\r\n- Creation of views via a generator function, which makes it easy to use custom views in any layer.\r\n\r\n##### Main Components:\r\n\r\n##### 1. Layers:\r\n\r\nA chart is the result of composing layers together. Everything is a layer - axis, guidelines, dividers, line, circles, etc. The idea is to have losely coupled components that can be easily changed and combined. This is for example the structure of a basic chart, which shows a line with circles:\r\n\r\n![ScreenShot](https://raw.github.com/i-schuetz/SwiftCharts/master/Screenshots/layers.png)\r\n\r\n\r\nCode:\r\n\r\n```swift\r\nlet labelSettings = ChartLabelSettings(font: ExamplesDefaults.labelFont)\r\n\r\nlet chartPoints = [(2, 2), (3, 1), (5, 9), (6, 7), (8, 10), (9, 9), (10, 15), (13, 8), (15, 20), (16, 17)].map{ChartPoint(x: ChartAxisValueInt($0.0), y: ChartAxisValueInt($0.1))}\r\n\r\nlet xValues = Array(stride(from: 2, through: 16, by: 2)).map {ChartAxisValueInt($0, labelSettings: labelSettings)}\r\nlet yValues = Array(stride(from: 0, through: 20, by: 2)).map {ChartAxisValueInt($0, labelSettings: labelSettings)}\r\n\r\nlet xModel = ChartAxisModel(axisValues: xValues, axisTitleLabel: ChartAxisLabel(text: \"Axis title\", settings: labelSettings))\r\nlet yModel = ChartAxisModel(axisValues: yValues, axisTitleLabel: ChartAxisLabel(text: \"Axis title\", settings: labelSettings))\r\nlet chartFrame = ExamplesDefaults.chartFrame(self.view.bounds)\r\n\r\nlet chartSettings = ExamplesDefaults.chartSettings\r\nlet coordsSpace = ChartCoordsSpaceLeftBottomSingleAxis(chartSettings: chartSettings, chartFrame: chartFrame, xModel: xModel, yModel: yModel)\r\nlet (xAxis, yAxis, innerFrame) = (coordsSpace.xAxis, coordsSpace.yAxis, coordsSpace.chartInnerFrame)\r\n\r\n// create layer with line\r\nlet lineModel = ChartLineModel(chartPoints: chartPoints, lineColor: UIColor(red: 0.4, green: 0.4, blue: 1, alpha: 0.2), lineWidth: 3, animDuration: 0.7, animDelay: 0)\r\nlet chartPointsLineLayer = ChartPointsLineLayer(xAxis: xAxis, yAxis: yAxis, innerFrame: innerFrame, lineModels: [lineModel])\r\n\r\n// view generator - creates circle view for each chartpoint\r\nlet circleViewGenerator = {(chartPointModel: ChartPointLayerModel, layer: ChartPointsLayer, chart: Chart) -> UIView? in\r\n    return ChartPointCircleView(center: chartPointModel.screenLoc, size: CGSizeMake(20, 20), settings: ChartPointCircleViewSettings(animDuration: 0.5))\r\n}\r\n// create layer that uses the view generator\r\nlet chartPointsCircleLayer = ChartPointsViewsLayer(xAxis: xAxis, yAxis: yAxis, innerFrame: innerFrame, chartPoints: chartPoints, viewGenerator: circleViewGenerator, displayDelay: 0, delayBetweenItems: 0.05)\r\n\r\n// create layer with guidelines\r\nvar settings = ChartGuideLinesDottedLayerSettings(linesColor: UIColor.blackColor(), linesWidth: ExamplesDefaults.guidelinesWidth, axis: .XAndY)\r\nlet guidelinesLayer = ChartGuideLinesDottedLayer(xAxis: xAxis, yAxis: yAxis, innerFrame: innerFrame, settings: settings)\r\n\r\nlet chart = Chart(\r\n    frame: chartFrame,\r\n    layers: [\r\n        xAxis,\r\n        yAxis,\r\n        guidelinesLayer,\r\n        chartPointsLineLayer,\r\n        chartPointsCircleLayer\r\n    ]\r\n)\r\n\r\nself.view.addSubview(chart.view)\r\nself.chart = chart\r\n```\r\n\r\nLayers are semantic units that can add views to the chart, or can simply draw in the chart's context for a better performance. Which makes more sense depends on the requirements.\r\n\r\n##### 2. View generators:\r\n\r\nView based layers will use a generator function to generate chart point views. This function receives the complete state of each chartpoint (model data, screen location) and produces an UIView, allowing any type of customization.\r\n\r\n##### Hello world:\r\n\r\nThere's a [hello world](Examples/Examples/Examples/HelloWorld.swift) included in the examples, similar to the above code, with a bit more explanations. Change some properties of the generated views, copy paste the chartPointsLineLayer used in the snippet above, and pass it to the chart's layers, to display a line behind the views, and you have already mastered the main concepts!\r\n\r\n##### Functional concepts:\r\n\r\nThis library is rather object oriented, but it makes extensive use of functional concepts like high order functions and (preference for) immutability leading to safer code and better maintainability.\r\n\r\n\r\n####Note on performance:\r\n\r\nIf you have a lot of axis labels in your chart it may be necessary to do the calculation of the coordinate space in the background. There can be a small delay which is noticeable during transitions or scrolling. See ScrollExample or MultipleAxesExample example for this.\r\n\r\n####Coming in the next releases:\r\n\r\n0.3 Performance improvements\r\n\r\n0.4 Create well known chart types with little code\r\n\r\n###### More documentation also coming soon!\r\n\r\n\r\n##### Version:\r\n\r\n0.2.2\r\n\r\n##### Contributing\r\n\r\n1. Fork\r\n2. Commit changes to a branch in your fork\r\n3. Push your code and make a pull request\r\n\r\n##### Created By:\r\n\r\nIvan Schütz\r\n\r\n##### License\r\n\r\nSwiftCharts is Copyright (c) 2015 Ivan Schütz and released as open source under the attached [Apache 2.0 license](LICENSE).\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\nThis is a port to Swift and (massively improved) continuation of an obj-c project which I did while working at eGym GmbH https://github.com/egymgmbh/ios-charts","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}